/*
 * MassBank3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package mb3server

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service      DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		{
			"GetRecords",
			strings.ToUpper("Get"),
			"/records",
			c.GetRecords,
		},
		{
			"GetSearchResults",
			strings.ToUpper("Get"),
			"/records/search",
			c.GetSearchResults,
		},
		{
			"GetRecord",
			strings.ToUpper("Get"),
			"/records/{accession}",
			c.GetRecord,
		},
		{
			"GetSimpleRecord",
			strings.ToUpper("Get"),
			"/records/{accession}/simple",
			c.GetSimpleRecord,
		},
		{
			"GetCount",
			strings.ToUpper("Get"),
			"/records/count",
			c.GetCount,
		},
		{
			"GetBrowseOptions",
			strings.ToUpper("Get"),
			"/filter/browse",
			c.GetBrowseOptions,
		},
		{
			"GetMetadata",
			strings.ToUpper("Get"),
			"/metadata",
			c.GetMetadata,
		},
		{
			"GetVersion",
			strings.ToUpper("Get"),
			"/version",
			c.GetVersion,
		},
		{
			"GetStatus",
			strings.ToUpper("Get"),
			"/status",
			c.GetStatus,
		},
		{
			"GetSimilarity",
			strings.ToUpper("Get"),
			"/similarity",
			c.GetSimilarity,
		},
	}
}

// GetRecords - Get records, filtered by the given parameters.
func (c *DefaultAPIController) GetRecords(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	contributorParam := strings.Split(query.Get("contributor"), ",")
	instrumentTypeParam := strings.Split(query.Get("instrument_type"), ",")
	msTypeParam := strings.Split(query.Get("ms_type"), ",")
	ionModeParam := query.Get("ion_mode")
	splashParam := query.Get("splash")
	compoundNameParam := query.Get("compound_name")
	compoundClassParam := query.Get("compound_class")
	exactMassParam := query.Get("exact_mass")
	massToleranceParam, err := parseFloat64Parameter(query.Get("mass_tolerance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	formulaParam := query.Get("formula")
	peaksParam := strings.Split(query.Get("peaks"), ",")
	intensityParam, err := parseInt32Parameter(query.Get("intensity"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	neutralLossParam := strings.Split(query.Get("neutral_loss"), ",")
	peakListParam := strings.Split(query.Get("peak_list"), ",")
	peakListThresholdParam, err := parseFloat64Parameter(query.Get("peak_list_threshold"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inchiParam := query.Get("inchi")
	inchiKeyParam := query.Get("inchi_key")
	substructureParam := query.Get("substructure")
	result, err := c.service.GetRecords(r.Context(), contributorParam, instrumentTypeParam, msTypeParam, ionModeParam, splashParam, compoundNameParam, compoundClassParam, exactMassParam, massToleranceParam, formulaParam, peaksParam, intensityParam, neutralLossParam, peakListParam, peakListThresholdParam, inchiParam, inchiKeyParam, substructureParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetSearchResults - Get a list of records as a search result in a specific format (accession, similarity score)
func (c *DefaultAPIController) GetSearchResults(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	contributorParam := strings.Split(query.Get("contributor"), ",")
	instrumentTypeParam := strings.Split(query.Get("instrument_type"), ",")
	msTypeParam := strings.Split(query.Get("ms_type"), ",")
	ionModeParam := query.Get("ion_mode")
	splashParam := query.Get("splash")
	compoundNameParam := query.Get("compound_name")
	compoundClassParam := query.Get("compound_class")
	exactMassParam := query.Get("exact_mass")
	massToleranceParam, err := parseFloat64Parameter(query.Get("mass_tolerance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	formulaParam := query.Get("formula")
	peaksParam := strings.Split(query.Get("peaks"), ",")
	intensityParam, err := parseInt32Parameter(query.Get("intensity"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	neutralLossParam := strings.Split(query.Get("neutral_loss"), ",")
	peakListParam := strings.Split(query.Get("peak_list"), ",")
	peakListThresholdParam, err := parseFloat64Parameter(query.Get("peak_list_threshold"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inchiParam := query.Get("inchi")
	inchiKeyParam := query.Get("inchi_key")
	substructureParam := query.Get("substructure")
	result, err := c.service.GetSearchResults(r.Context(), contributorParam, instrumentTypeParam, msTypeParam, ionModeParam, splashParam, compoundNameParam, compoundClassParam, exactMassParam, massToleranceParam, formulaParam, peaksParam, intensityParam, neutralLossParam, peakListParam, peakListThresholdParam, inchiParam, inchiKeyParam, substructureParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetRecord - Get a MassBank record.
func (c *DefaultAPIController) GetRecord(w http.ResponseWriter, r *http.Request) {
	accessionParam := chi.URLParam(r, "accession")

	result, err := c.service.GetRecord(r.Context(), accessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetSimpleRecord - Get a MassBank record in with reduced information level (accession, title, peaks, smiles).
func (c *DefaultAPIController) GetSimpleRecord(w http.ResponseWriter, r *http.Request) {
	accessionParam := chi.URLParam(r, "accession")

	result, err := c.service.GetSimpleRecord(r.Context(), accessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetCount - The number of all records in the database.
func (c *DefaultAPIController) GetCount(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCount(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetBrowseOptions - Get all browse options (contributor, instrument type, ms type, ion mode).
func (c *DefaultAPIController) GetBrowseOptions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	contributorParam := strings.Split(query.Get("contributor"), ",")
	instrumentTypeParam := strings.Split(query.Get("instrument_type"), ",")
	msTypeParam := strings.Split(query.Get("ms_type"), ",")
	ionModeParam := query.Get("ion_mode")
	result, err := c.service.GetBrowseOptions(r.Context(), contributorParam, instrumentTypeParam, msTypeParam, ionModeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetMetadata - Get the metadata of the database and the current dataset in use. It includes the version, timestamp, git commit hash, unique spectra count (SPLASH), unique compound count (InChI) and all compound classes with counts.
func (c *DefaultAPIController) GetMetadata(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetMetadata(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetVersion - Get the current API version.
func (c *DefaultAPIController) GetVersion(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetVersion(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetStatus - Get the status of the attached services (postgres, export service, similarity service).
func (c *DefaultAPIController) GetStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// GetSimilarity - Get a list of records with similarity scores.
func (c *DefaultAPIController) GetSimilarity(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	peakListParam := strings.Split(query.Get("peak_list"), ",")
	peakListThresholdParam, err := parseFloat64Parameter(query.Get("peak_list_threshold"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	referenceSpectraListParam := strings.Split(query.Get("reference_spectra_list"), ",")
	result, err := c.service.GetSimilarity(r.Context(), peakListParam, peakListThresholdParam, referenceSpectraListParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
