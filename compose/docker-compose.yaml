services:

  postgres:
    image: docker.io/postgres:latest
    restart: always
    ports:
      - '${DB_PORT}:${DB_PORT}'
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "$$POSTGRES_DB","-U", "$$POSTGRES_USER"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 40s

  mb3server:
    build: ../
    restart: always
    ports:
      - "${MB3_API_PORT}:${MB3_SERVER_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_TYPE
      - DB_PORT
      - DB_PASSWORD
      - DB_HOST
      - DB_NAME
      - DB_CONN_STRING
      - MB3_SERVER_PORT
      - CDKDEPICT_URL

  similarity-service-cosine:
    build: ../similarity-service-cosine
    restart: always
    ports:
      - "${SIMILARITY_SERVICE_COSINE_PORT}:8080"
    depends_on:
      mb3tool:
        condition: service_completed_successfully
    environment:
      - DB_PORT
      - DB_USER
      - DB_PASSWORD
      - DB_HOST
      - DB_NAME

  mb3frontend:
    build:
      context: ..
      dockerfile: Dockerfile-frontend
      args:
        MB3_API_URL: "http://${MB3_API_HOST}:${MB3_API_PORT}"
        MB3_FRONTEND_BASE_URL: "${MB3_FRONTEND_BASE_URL}"
    restart: always
    ports:
      - "${MB3_FRONTEND_PORT}:3000"

  mb3tool:
    build:
      context: ..
      dockerfile: Dockerfile-dbtool
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_TYPE
      - DB_PORT
      - DB_USER
      - DB_PASSWORD
      - DB_HOST
      - DB_NAME
      - DB_CONN_STRING
      - MB_GIT_REPO
      - MB_GIT_BRANCH
      - MB_DATA_DIRECTORY
      - MB_DROP_ALL
