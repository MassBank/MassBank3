/*
 * MassBank3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package mb3server

import (
	"context"
	"database/sql"
	"net/http"
)

// DefaultAPIService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultAPIService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() *DefaultAPIService {
	return &DefaultAPIService{}
}

// GetBrowseOptions - get browse options
func (s *DefaultAPIService) GetBrowseOptions(ctx context.Context, contributor []string, instrumentType []string, msType []string, ionMode string) (ImplResponse, error) {
	opt, err := GetBrowseOptions(contributor, instrumentType, msType, ionMode)
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}
	return Response(http.StatusOK, opt), nil
}

// GetCount - get record count
func (s *DefaultAPIService) GetCount(ctx context.Context) (ImplResponse, error) {
	count, err := GetCount()
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}

	return Response(200, count), nil
}

// GetMetadata - get massbank metadata
func (s *DefaultAPIService) GetMetadata(ctx context.Context) (ImplResponse, error) {
	metadata, err := GetMetadata()
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}
	return Response(200, metadata), err
}

// GetRecord - Get a MassBank record
func (s *DefaultAPIService) GetRecord(ctx context.Context, accession string) (ImplResponse, error) {
	record, err := GetRecord(accession)
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}
	return Response(200, record), err
}

// GetRecords - Get a list of records
func (s *DefaultAPIService) GetRecords(ctx context.Context, contributor []string, instrumentType []string, msType []string, ionMode string, splash string, compoundName string, compoundClass string, exactMass string, massTolerance float64, formula string, peaks []string, intensity int32, neutralLoss []string, peakList []string, peakListThreshold float64, inchi string, inchiKey string, substructure string) (ImplResponse, error) {
	result, err := GetRecords(contributor, instrumentType, msType, ionMode, splash, compoundName, compoundClass, exactMass, massTolerance, formula, peaks, intensity, neutralLoss, peakList, peakListThreshold, inchi, inchiKey, substructure)
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}
	return Response(200, result), nil
}

// GetVersion - Get the version of the MassBank API
func (s *DefaultAPIService) GetVersion(ctx context.Context) (ImplResponse, error) {
	result, err := GetVersion()
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}
	return Response(200, result), nil
}

// GetStatus - Get the status of the MassBank API
func (s *DefaultAPIService) GetStatus(ctx context.Context) (ImplResponse, error) {
	result, err := GetStatus()
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	return Response(200, result), nil
}

// GetSimilarity implements DefaultAPIServicer.
func (s *DefaultAPIService) GetSimilarity(ctx context.Context, peakList []string, threshold float64, referenceSpectraList []string) (ImplResponse, error) {
	result, err := GetSimilarity(peakList, threshold, referenceSpectraList)
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}

	return Response(http.StatusOK, result), err
}

// GetSimpleRecord - Get a simple MassBank record
func (s *DefaultAPIService) GetSimpleRecord(ctx context.Context, accession string) (ImplResponse, error) {
	record, err := GetSimpleRecord(accession)
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}

	return Response(200, record), err
}

// GetSimpleRecords - Get a list of records
func (s *DefaultAPIService) GetSearchResults(ctx context.Context, contributor []string, instrumentType []string, msType []string, ionMode string, splash string, compoundName string, compoundClass string, exactMass string, massTolerance float64, formula string, peaks []string, intensity int32, neutralLoss []string, peakList []string, peakListThreshold float64, inchi string, inchiKey string, substructure string) (ImplResponse, error) {
	result, err := GetSearchResults(contributor, instrumentType, msType, ionMode, splash, compoundName, compoundClass, exactMass, massTolerance, formula, peaks, intensity, neutralLoss, peakList, peakListThreshold, inchi, inchiKey, substructure)
	if err != nil {
		if err != sql.ErrNoRows {
			return Response(http.StatusInternalServerError, nil), err
		}
	}

	return Response(200, result), nil
}
