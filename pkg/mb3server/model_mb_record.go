// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * MassBank3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

package mb3server




type MbRecord struct {

	// Record identifier
	Accession string `json:"accession" validate:"regexp=MSBNK-[A-Z0–9_]{1,32}-[A-Z0–9_]{1,64}"`

	Deprecated MbRecordDeprecated `json:"deprecated,omitempty"`

	// Short title of the record. It is composed as 'compound.names[0]; acquisition.instrument_type; acquisition.mass_spectrometry.ms_type'
	Title string `json:"title"`

	Date MbRecordDate `json:"date"`

	Authors []AuthorsInner `json:"authors"`

	// Creative Commons License or its compatible terms
	License string `json:"license"`

	// Copyright
	Copyright string `json:"copyright,omitempty"`

	// Bibliographic information of reference
	Publication string `json:"publication,omitempty"`

	// Information on a related project
	Project string `json:"project,omitempty"`

	// Comments
	Comments []MbRecordCommentsInner `json:"comments,omitempty"`

	Compound MbRecordCompound `json:"compound,omitempty"`

	Species MbRecordSpecies `json:"species,omitempty"`

	Acquisition MbRecordAcquisition `json:"acquisition,omitempty"`

	MassSpectrometry MbRecordMassSpectrometry `json:"mass_spectrometry,omitempty"`

	Peak MbRecordPeak `json:"peak,omitempty"`
}

// AssertMbRecordRequired checks if the required fields are not zero-ed
func AssertMbRecordRequired(obj MbRecord) error {
	elements := map[string]interface{}{
		"accession": obj.Accession,
		"title": obj.Title,
		"date": obj.Date,
		"authors": obj.Authors,
		"license": obj.License,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertMbRecordDeprecatedRequired(obj.Deprecated); err != nil {
		return err
	}
	if err := AssertMbRecordDateRequired(obj.Date); err != nil {
		return err
	}
	for _, el := range obj.Authors {
		if err := AssertAuthorsInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Comments {
		if err := AssertMbRecordCommentsInnerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertMbRecordCompoundRequired(obj.Compound); err != nil {
		return err
	}
	if err := AssertMbRecordSpeciesRequired(obj.Species); err != nil {
		return err
	}
	if err := AssertMbRecordAcquisitionRequired(obj.Acquisition); err != nil {
		return err
	}
	if err := AssertMbRecordMassSpectrometryRequired(obj.MassSpectrometry); err != nil {
		return err
	}
	if err := AssertMbRecordPeakRequired(obj.Peak); err != nil {
		return err
	}
	return nil
}

// AssertMbRecordConstraints checks if the values respects the defined constraints
func AssertMbRecordConstraints(obj MbRecord) error {
	if err := AssertMbRecordDeprecatedConstraints(obj.Deprecated); err != nil {
		return err
	}
	if err := AssertMbRecordDateConstraints(obj.Date); err != nil {
		return err
	}
	for _, el := range obj.Authors {
		if err := AssertAuthorsInnerConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Comments {
		if err := AssertMbRecordCommentsInnerConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertMbRecordCompoundConstraints(obj.Compound); err != nil {
		return err
	}
	if err := AssertMbRecordSpeciesConstraints(obj.Species); err != nil {
		return err
	}
	if err := AssertMbRecordAcquisitionConstraints(obj.Acquisition); err != nil {
		return err
	}
	if err := AssertMbRecordMassSpectrometryConstraints(obj.MassSpectrometry); err != nil {
		return err
	}
	if err := AssertMbRecordPeakConstraints(obj.Peak); err != nil {
		return err
	}
	return nil
}
