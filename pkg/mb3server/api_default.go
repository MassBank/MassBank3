// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * MassBank3 API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0
 */

package mb3server

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"GetRecords": Route{
			strings.ToUpper("Get"),
			"/records",
			c.GetRecords,
		},
		"GetSearchResults": Route{
			strings.ToUpper("Get"),
			"/records/search",
			c.GetSearchResults,
		},
		"GetRecord": Route{
			strings.ToUpper("Get"),
			"/records/{accession}",
			c.GetRecord,
		},
		"GetSimpleRecord": Route{
			strings.ToUpper("Get"),
			"/records/{accession}/simple",
			c.GetSimpleRecord,
		},
		"GetCount": Route{
			strings.ToUpper("Get"),
			"/records/count",
			c.GetCount,
		},
		"GetBrowseOptions": Route{
			strings.ToUpper("Get"),
			"/filter/browse",
			c.GetBrowseOptions,
		},
		"GetMetadata": Route{
			strings.ToUpper("Get"),
			"/metadata",
			c.GetMetadata,
		},
		"GetVersion": Route{
			strings.ToUpper("Get"),
			"/version",
			c.GetVersion,
		},
		"GetStatus": Route{
			strings.ToUpper("Get"),
			"/status",
			c.GetStatus,
		},
		"GetSimilarity": Route{
			strings.ToUpper("Get"),
			"/similarity",
			c.GetSimilarity,
		},
	}
}

// GetRecords - Get records, filtered by the given parameters.
func (c *DefaultAPIController) GetRecords(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var contributorParam []string
	if query.Has("contributor") {
		contributorParam = strings.Split(query.Get("contributor"), ",")
	}
	var instrumentTypeParam []string
	if query.Has("instrument_type") {
		instrumentTypeParam = strings.Split(query.Get("instrument_type"), ",")
	}
	var msTypeParam []string
	if query.Has("ms_type") {
		msTypeParam = strings.Split(query.Get("ms_type"), ",")
	}
	var ionModeParam string
	if query.Has("ion_mode") {
		param := query.Get("ion_mode")

		ionModeParam = param
	} else {
	}
	var splashParam string
	if query.Has("splash") {
		param := query.Get("splash")

		splashParam = param
	} else {
	}
	var compoundNameParam string
	if query.Has("compound_name") {
		param := query.Get("compound_name")

		compoundNameParam = param
	} else {
	}
	var compoundClassParam string
	if query.Has("compound_class") {
		param := query.Get("compound_class")

		compoundClassParam = param
	} else {
	}
	var exactMassParam string
	if query.Has("exact_mass") {
		param := query.Get("exact_mass")

		exactMassParam = param
	} else {
	}
	var massToleranceParam float64
	if query.Has("mass_tolerance") {
		param, err := parseNumericParameter[float64](
			query.Get("mass_tolerance"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "mass_tolerance", Err: err}, nil)
			return
		}

		massToleranceParam = param
	} else {
		var param float64 = 0.3
		massToleranceParam = param
	}
	var formulaParam string
	if query.Has("formula") {
		param := query.Get("formula")

		formulaParam = param
	} else {
	}
	var peaksParam []string
	if query.Has("peaks") {
		peaksParam = strings.Split(query.Get("peaks"), ",")
	}
	var intensityParam int32
	if query.Has("intensity") {
		param, err := parseNumericParameter[int32](
			query.Get("intensity"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "intensity", Err: err}, nil)
			return
		}

		intensityParam = param
	} else {
		var param int32 = 50
		intensityParam = param
	}
	var neutralLossParam []string
	if query.Has("neutral_loss") {
		neutralLossParam = strings.Split(query.Get("neutral_loss"), ",")
	}
	var peakListParam []string
	if query.Has("peak_list") {
		peakListParam = strings.Split(query.Get("peak_list"), ",")
	}
	var peakListThresholdParam float64
	if query.Has("peak_list_threshold") {
		param, err := parseNumericParameter[float64](
			query.Get("peak_list_threshold"),
			WithParse[float64](parseFloat64),
			WithMinimum[float64](0.0),
			WithMaximum[float64](1.0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "peak_list_threshold", Err: err}, nil)
			return
		}

		peakListThresholdParam = param
	} else {
		var param float64 = 0.8
		peakListThresholdParam = param
	}
	var inchiParam string
	if query.Has("inchi") {
		param := query.Get("inchi")

		inchiParam = param
	} else {
	}
	var inchiKeyParam string
	if query.Has("inchi_key") {
		param := query.Get("inchi_key")

		inchiKeyParam = param
	} else {
	}
	var substructureParam string
	if query.Has("substructure") {
		param := query.Get("substructure")

		substructureParam = param
	} else {
	}
	result, err := c.service.GetRecords(r.Context(), contributorParam, instrumentTypeParam, msTypeParam, ionModeParam, splashParam, compoundNameParam, compoundClassParam, exactMassParam, massToleranceParam, formulaParam, peaksParam, intensityParam, neutralLossParam, peakListParam, peakListThresholdParam, inchiParam, inchiKeyParam, substructureParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSearchResults - Get a list of records as a search result in a specific format (accession, similarity score)
func (c *DefaultAPIController) GetSearchResults(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var contributorParam []string
	if query.Has("contributor") {
		contributorParam = strings.Split(query.Get("contributor"), ",")
	}
	var instrumentTypeParam []string
	if query.Has("instrument_type") {
		instrumentTypeParam = strings.Split(query.Get("instrument_type"), ",")
	}
	var msTypeParam []string
	if query.Has("ms_type") {
		msTypeParam = strings.Split(query.Get("ms_type"), ",")
	}
	var ionModeParam string
	if query.Has("ion_mode") {
		param := query.Get("ion_mode")

		ionModeParam = param
	} else {
	}
	var splashParam string
	if query.Has("splash") {
		param := query.Get("splash")

		splashParam = param
	} else {
	}
	var compoundNameParam string
	if query.Has("compound_name") {
		param := query.Get("compound_name")

		compoundNameParam = param
	} else {
	}
	var compoundClassParam string
	if query.Has("compound_class") {
		param := query.Get("compound_class")

		compoundClassParam = param
	} else {
	}
	var exactMassParam string
	if query.Has("exact_mass") {
		param := query.Get("exact_mass")

		exactMassParam = param
	} else {
	}
	var massToleranceParam float64
	if query.Has("mass_tolerance") {
		param, err := parseNumericParameter[float64](
			query.Get("mass_tolerance"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "mass_tolerance", Err: err}, nil)
			return
		}

		massToleranceParam = param
	} else {
		var param float64 = 0.3
		massToleranceParam = param
	}
	var formulaParam string
	if query.Has("formula") {
		param := query.Get("formula")

		formulaParam = param
	} else {
	}
	var peaksParam []string
	if query.Has("peaks") {
		peaksParam = strings.Split(query.Get("peaks"), ",")
	}
	var intensityParam int32
	if query.Has("intensity") {
		param, err := parseNumericParameter[int32](
			query.Get("intensity"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "intensity", Err: err}, nil)
			return
		}

		intensityParam = param
	} else {
		var param int32 = 50
		intensityParam = param
	}
	var neutralLossParam []string
	if query.Has("neutral_loss") {
		neutralLossParam = strings.Split(query.Get("neutral_loss"), ",")
	}
	var peakListParam []string
	if query.Has("peak_list") {
		peakListParam = strings.Split(query.Get("peak_list"), ",")
	}
	var peakListThresholdParam float64
	if query.Has("peak_list_threshold") {
		param, err := parseNumericParameter[float64](
			query.Get("peak_list_threshold"),
			WithParse[float64](parseFloat64),
			WithMinimum[float64](0.0),
			WithMaximum[float64](1.0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "peak_list_threshold", Err: err}, nil)
			return
		}

		peakListThresholdParam = param
	} else {
		var param float64 = 0.8
		peakListThresholdParam = param
	}
	var inchiParam string
	if query.Has("inchi") {
		param := query.Get("inchi")

		inchiParam = param
	} else {
	}
	var inchiKeyParam string
	if query.Has("inchi_key") {
		param := query.Get("inchi_key")

		inchiKeyParam = param
	} else {
	}
	var substructureParam string
	if query.Has("substructure") {
		param := query.Get("substructure")

		substructureParam = param
	} else {
	}
	result, err := c.service.GetSearchResults(r.Context(), contributorParam, instrumentTypeParam, msTypeParam, ionModeParam, splashParam, compoundNameParam, compoundClassParam, exactMassParam, massToleranceParam, formulaParam, peaksParam, intensityParam, neutralLossParam, peakListParam, peakListThresholdParam, inchiParam, inchiKeyParam, substructureParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecord - Get a MassBank record.
func (c *DefaultAPIController) GetRecord(w http.ResponseWriter, r *http.Request) {
	accessionParam := chi.URLParam(r, "accession")
	if accessionParam == "" {
		c.errorHandler(w, r, &RequiredError{"accession"}, nil)
		return
	}
	result, err := c.service.GetRecord(r.Context(), accessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSimpleRecord - Get a MassBank record in with reduced information level (accession, title, peaks, smiles).
func (c *DefaultAPIController) GetSimpleRecord(w http.ResponseWriter, r *http.Request) {
	accessionParam := chi.URLParam(r, "accession")
	if accessionParam == "" {
		c.errorHandler(w, r, &RequiredError{"accession"}, nil)
		return
	}
	result, err := c.service.GetSimpleRecord(r.Context(), accessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCount - The number of all records in the database.
func (c *DefaultAPIController) GetCount(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCount(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBrowseOptions - Get all browse options (contributor, instrument type, ms type, ion mode).
func (c *DefaultAPIController) GetBrowseOptions(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var contributorParam []string
	if query.Has("contributor") {
		contributorParam = strings.Split(query.Get("contributor"), ",")
	}
	var instrumentTypeParam []string
	if query.Has("instrument_type") {
		instrumentTypeParam = strings.Split(query.Get("instrument_type"), ",")
	}
	var msTypeParam []string
	if query.Has("ms_type") {
		msTypeParam = strings.Split(query.Get("ms_type"), ",")
	}
	var ionModeParam string
	if query.Has("ion_mode") {
		param := query.Get("ion_mode")

		ionModeParam = param
	} else {
	}
	result, err := c.service.GetBrowseOptions(r.Context(), contributorParam, instrumentTypeParam, msTypeParam, ionModeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMetadata - Get the metadata of the database and the current dataset in use. It includes the version, timestamp, git commit hash, unique spectra count (SPLASH), unique compound count (InChI) and compound classes (free text/ChemOnt) with counts.
func (c *DefaultAPIController) GetMetadata(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetMetadata(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVersion - Get the current API version.
func (c *DefaultAPIController) GetVersion(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetVersion(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStatus - Get the status of the attached services (postgres, export service, similarity service).
func (c *DefaultAPIController) GetStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSimilarity - Get a list of records with similarity scores.
func (c *DefaultAPIController) GetSimilarity(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var peakListParam []string
	if query.Has("peak_list") {
		peakListParam = strings.Split(query.Get("peak_list"), ",")
	}
	var peakListThresholdParam float64
	if query.Has("peak_list_threshold") {
		param, err := parseNumericParameter[float64](
			query.Get("peak_list_threshold"),
			WithParse[float64](parseFloat64),
			WithMinimum[float64](0.0),
			WithMaximum[float64](1.0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "peak_list_threshold", Err: err}, nil)
			return
		}

		peakListThresholdParam = param
	} else {
		var param float64 = 0.8
		peakListThresholdParam = param
	}
	var referenceSpectraListParam []string
	if query.Has("reference_spectra_list") {
		referenceSpectraListParam = strings.Split(query.Get("reference_spectra_list"), ",")
	}
	result, err := c.service.GetSimilarity(r.Context(), peakListParam, peakListThresholdParam, referenceSpectraListParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
